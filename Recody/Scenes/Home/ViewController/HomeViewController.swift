//
//  HomeViewController.swift
//  Recody
//
//  Created by 마경미 on 2022/08/04.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

class HomeViewController: UIViewController {
    var viewModel = HomeViewModel()
    let disposeBag = DisposeBag()

    @IBOutlet weak var workScrollView: UIScrollView!
    @IBOutlet weak var workStackView: UIStackView!
    @IBOutlet weak var nickNameLabel: UILabel!
    @IBOutlet weak var nickNameLabel2: UILabel!
    @IBOutlet weak var currentRecordView: UIView!
    @IBOutlet weak var notificationButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUp()
        viewModel.getUserInfo.accept(())
        bind()
        setWorkView()
    }

    static func getInstanse() -> HomeViewController {
        guard let vc =  UIStoryboard(name: "Home", bundle: nil).instantiateViewController(withIdentifier: "home") as? HomeViewController
        else {
            fatalError()
        }
        return vc
    }

    func setUp() {
//        self.interactor?.just(UseCase.setting).drop()
        self.notificationButton.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(clickEvent)))
    }
    
    func setWorkView() {
        for work in viewModel.works {
            let view = WorkView()
            view.setView(work: work)
            view.tag = 109
            view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(clickEvent(_:))))
            workStackView.addArrangedSubview(view)
        }
    }

    @objc func clickEvent(_ sender: UITapGestureRecognizer) {
        
    }

    enum UseCase: Int {
        case setting = 105
        case notification = 106
        case moveReviewing = 107
        case workCategory = 108
        case pushWorkDetailInfo = 109
        case pushNotification = 110
        var number: Int {
            return self.rawValue
        }
    }
}

extension HomeViewController: baseViewControllerAttrubute {
    func bind() {
        notificationButton.rx.tap
            .subscribe(onNext: {
                // 알림창으로 뷰 넘기면 되고
            }).disposed(by: disposeBag)
        viewModel.isUserInfoGet
            .bind(to: nickNameLabel.rx.text)
            .disposed(by: disposeBag)
        viewModel.isUserInfoGet
            .bind(to: nickNameLabel2.rx.text)
            .disposed(by: disposeBag)
        viewModel.isCurrentRecordGet
            .bind(onNext: { _ in
                // 처리
            }).disposed(by: disposeBag)
        viewModel.error
            .bind(onNext: { error in
                print(error.localizedDescription)
            }).disposed(by: disposeBag)
    }
    
    func configure() {
        let tapGesture = UITapGestureRecognizer()
        currentRecordView.addGestureRecognizer(tapGesture)
        tapGesture.rx.event
            .bind { [weak self] _ in
                // record view 그리기
            }.disposed(by: disposeBag)
    }
}
