//
//  HomeModels.swift
//  Recody
//
//  Created by 마경미 on 2022/08/04.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import RxCocoa
import RxSwift

class HomeViewModel {
    private let api = UserService()
    let getUserInfo = PublishRelay<Void>()
    var isUserInfoGet = PublishSubject<UserInfoResponse>()
    let userInfo = PublishRelay<UserInfo>()
    let error = PublishRelay<Error>()
    let disposeBag = DisposeBag()

    struct Input {
    }

    struct Output {
        
        // 알림창 event
        
        // 카테고리 선택 event
        
        // 이미지 선택 event
        
        // 기록중인 작품 event
        
        // 추천 작품 event
        
        // 유저 정보 가져오기 성공 유무
        let isUserInfoGet = PublishSubject<UserInfoResponse>()
    }

    // 임시 데이터
    let works: [Work] = [
        Work(id: "0", name: "Attention", image: "attention"),
        Work(id: "1", name: "1987", image: "1987"),
        Work(id: "2", name: "CallMeByYourName", image: "callMeByYourName"),
        Work(id: "3", name: "her", image: "her"),
        Work(id: "4", name: "Pink Venom", image: "pinkVenom"),
        Work(id: "5", name: "마더", image: "mother"),
        Work(id: "6", name: "블랙 팬서", image: "blackPanther"),
        Work(id: "7", name: "스파이더맨", image: "spiderman"),
        Work(id: "8", name: "After Like", image: "afterLike")
    ]
    
    init() {
        getUserInfo
            .flatMapLatest { [weak self] _ -> Observable<UserInfoResponse> in
                guard let self = self else { return Observable.empty() }
                return self.api.userInfoRequest()
                    .asObservable()
            }
            .subscribe(onNext: { [weak self] response in
                guard let self = self else { return }
                self.isUserInfoGet.onNext(response) // API 호출 결과를 옵저버블에 방출합니다.
                self.userInfo.accept(response.data.userInfo)
            }, onError: { [weak self] error in
                self?.isUserInfoGet.onError(error) // 에러 처리
            })
            .disposed(by: disposeBag)
    }
}
